/* Generated By:JavaCC: Do not edit this line. OLParser.java */
package org.yamcs.scos2k.ol;
import java.util.*;
import org.yamcs.scos2k.*;
import static org.yamcs.scos2k.ol.ExpressionCode.getCode;

public class OLParser extends BaseOLParser implements OLParserConstants {
  private StringBuilder body;

  int isize = 2;
  private void sappend(String s) {
      body.append(" ").append(s).append(" ");
    }

    private void indent() {
      for(int i=0; i<isize; i++) {
        body.append("    ");
      }
    }

    private void nl() {
      body.append("\u005cn");
    }
    protected void parse(StringBuilder body) throws ParseException {
       this.body = body;
       Formula();
    }

  final public void Formula() throws ParseException {
    StatementList();
    jj_consume_token(0);
  }

  final public void StatementList() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case RETURN:
      case TRUE:
      case FALSE:
      case SIN:
      case COS:
      case TAN:
      case COTAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ARCCOTAN:
      case SYSTEM_TIME:
      case SYSTEM_DATE:
      case NOT:
      case LNOT:
      case SYNTH:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case 38:
      case 39:
      case 40:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
  }

  final public void Statement() throws ParseException {
   ExpressionCode ec;
    indent();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      ConditionalStatement();
      jj_consume_token(36);
                                  body.append("\u005cn");
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_1(2)) {
        AssignmentStatement();
        jj_consume_token(36);
                                              body.append(";\u005cn");
      } else if (jj_2_2(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          jj_consume_token(RETURN);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        ec = Expression();
        jj_consume_token(36);
        body.append("return ");
        body.append(getReturnCode(ec));
        body.append(";\u005cn");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ConditionalStatement() throws ParseException {
        ExpressionCode ec;
    jj_consume_token(IF);
    ec = Expression();
      body.append("if(").append(ec.code).append(") {\u005cn"); isize++;
    jj_consume_token(THEN);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
       isize--; indent(); body.append("} else {\u005cn"); isize++;
      StatementList();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
    isize--; indent(); body.append("}");
  }

  final public void AssignmentStatement() throws ParseException {
  Token t;
  ExpressionCode ec;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(37);
    ec = Expression();
      String varname = t.image;
      if(isLocalVar(varname)) {
          addVariable(varname, ec.type);
          body.append(varname);
          body.append(" = ");
          body.append(ec.code);
      } else {
          body.append("globalVariables.set(\u005c"").append(varname).append('"')
            .append(", ").append(ec.code).append(")");
      }
  }

  final public ExpressionCode Expression() throws ParseException {
   ExpressionCode ec1, ec2 = null;
   Operation op = null;
    ec1 = LogicalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case LOR:
    case XOR:
    case LAND:
      op = LogicOp();
      ec2 = Expression();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return getCode(ec1, ec2, op);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode LogicalExpression() throws ParseException {
   ExpressionCode ec1, ec2 = null;
   Operation op = null;
    ec1 = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
      op = LogicOp1();
      ec2 = LogicalExpression();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return getCode(ec1, ec2, op);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode ShiftExpression() throws ParseException {
   ExpressionCode ec1, ec2 = null;
   Operation op = null;
    ec1 = RelationlExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
    case 50:
      op = ShiftOp();
      ec2 = ShiftExpression();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
      {if (true) return getCode(ec1, ec2, op);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode RelationlExpression() throws ParseException {
 ExpressionCode ec1, ec2 = null;
 Operation op = null;
    ec1 = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
    case 44:
    case 45:
    case 46:
      op = RelOp();
      ec2 = RelationlExpression();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      {if (true) return getCode(ec1, ec2, op);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode AdditiveExpression() throws ParseException {
 ExpressionCode ec1, ec2 = null;
 Operation op = null;
    ec1 = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
    case 39:
      op = AddOp();
      ec2 = AdditiveExpression();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      {if (true) return getCode(ec1, ec2, op);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode MultiplicativeExpression() throws ParseException {
 ExpressionCode ec1, ec2 = null;
 Operation op = null;
    ec1 = UnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
    case 52:
    case 53:
    case 54:
      op = MulOp();
      ec2 = MultiplicativeExpression();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     {if (true) return getCode(ec1, ec2, op);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode UnaryExpression() throws ParseException {
  ExpressionCode ec1 = null;
  Operation op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case LNOT:
    case 38:
    case 39:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
             op = Operation.PLUS;
        break;
      case 39:
        jj_consume_token(39);
            op = Operation.MINUS;
        break;
      case NOT:
        jj_consume_token(NOT);
              op = Operation.BITW_NOT;
        break;
      case LNOT:
        jj_consume_token(LNOT);
               op = Operation.LOGIC_NOT;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    ec1 = PrimaryExpression();
       if(op==null) {
          {if (true) return ec1;}
        } else {
           {if (true) return new ExpressionCode(ec1.type, op.code+ec1.code);}
        }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode PrimaryExpression() throws ParseException {
  String fn;
  Token t;
  ExpressionCode ec;
  List<ExpressionCode> l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      ec = Constant();
                      {if (true) return ec;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                        {if (true) return getIdentifierCode(t.image);}
      break;
    case 40:
      jj_consume_token(40);
      ec = Expression();
      jj_consume_token(41);
                                 {if (true) return new ExpressionCode(ec.type, "("+ec.code+")");}
      break;
    case SYNTH:
      ec = Synth();
                   {if (true) return ec;}
      break;
    case SIN:
    case COS:
    case TAN:
    case COTAN:
    case ARCSIN:
    case ARCCOS:
    case ARCTAN:
    case ARCCOTAN:
    case SYSTEM_TIME:
    case SYSTEM_DATE:
      fn = FunctionName();
      jj_consume_token(40);
      l = ArgumentList();
      jj_consume_token(41);
       StringBuilder sb = new StringBuilder();
       sb.append(OLFunction.getJavaFunctionName(fn, l.size()));
       sb.append("(");
       boolean first = true;
       for(ExpressionCode ec1: l) {
           if(first) {
              first = false;
            } else {
               sb.append(", ");
            }
            sb.append(ec1.code);
       }
       sb.append(")");

       {if (true) return new ExpressionCode(Type.DOUBLE, sb.toString());}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<ExpressionCode> ArgumentList() throws ParseException {
 List<ExpressionCode> l = new ArrayList<ExpressionCode>();
 ExpressionCode ec;
    ec = Expression();
                         l.add(ec);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      jj_consume_token(42);
      ec = Expression();
                              l.add(ec);
    }
     {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public String FunctionName() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIN:
      t = jj_consume_token(SIN);
      break;
    case COS:
      t = jj_consume_token(COS);
      break;
    case TAN:
      t = jj_consume_token(TAN);
      break;
    case COTAN:
      t = jj_consume_token(COTAN);
      break;
    case ARCSIN:
      t = jj_consume_token(ARCSIN);
      break;
    case ARCCOS:
      t = jj_consume_token(ARCCOS);
      break;
    case ARCTAN:
      t = jj_consume_token(ARCTAN);
      break;
    case ARCCOTAN:
      t = jj_consume_token(ARCCOTAN);
      break;
    case SYSTEM_TIME:
      t = jj_consume_token(SYSTEM_TIME);
      break;
    case SYSTEM_DATE:
      t = jj_consume_token(SYSTEM_DATE);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode Synth() throws ParseException {
  List<String> paraList = new ArrayList<String>();
  Token t;
    jj_consume_token(SYNTH);
    jj_consume_token(40);
    t = jj_consume_token(IDENTIFIER);
                         paraList.add(t.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
      jj_consume_token(42);
      t = jj_consume_token(IDENTIFIER);
                               paraList.add(t.image);
    }
    jj_consume_token(41);
        {if (true) return getSynthExpression(paraList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionCode Constant() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
                 {if (true) return new ExpressionCode(Type.BOOLEAN, "Boolean.TRUE");}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                   {if (true) return new ExpressionCode(Type.BOOLEAN, "Boolean.FALSE");}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                               {if (true) return new ExpressionCode(Type.LONG, t.image);}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                    {if (true) return new ExpressionCode(Type.DOUBLE, t.image);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
          {if (true) return Operation.SMALLER_THAN;}
      break;
    case 44:
      jj_consume_token(44);
          {if (true) return Operation.SMALLER_THAN_EQ;}
      break;
    case 45:
      jj_consume_token(45);
          {if (true) return Operation.BIGGER_THAN;}
      break;
    case 46:
      jj_consume_token(46);
          {if (true) return Operation.BIGGER_THAN_EQ;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation LogicOp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
           {if (true) return Operation.EQUAL;}
      break;
    case 48:
      jj_consume_token(48);
           {if (true) return Operation.DIFFER;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation ShiftOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
             {if (true) return Operation.SHIFT_LEFT;}
      break;
    case 50:
      jj_consume_token(50);
           {if (true) return Operation.SHIFT_RIGHT;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation AddOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
          {if (true) return Operation.PLUS;}
      break;
    case 39:
      jj_consume_token(39);
          {if (true) return Operation.MINUS;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation MulOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
         {if (true) return Operation.STAR;}
      break;
    case 52:
      jj_consume_token(52);
           {if (true) return Operation.POW;}
      break;
    case 53:
      jj_consume_token(53);
          {if (true) return Operation.SLASH;}
      break;
    case 54:
      jj_consume_token(54);
          {if (true) return Operation.MODULUS;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation LogicOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
            {if (true) return Operation.BITW_OR;}
      break;
    case AND:
      jj_consume_token(AND);
             {if (true) return Operation.BITW_AND;}
      break;
    case LOR:
      jj_consume_token(LOR);
             {if (true) return Operation.LOGIC_OR;}
      break;
    case LAND:
      jj_consume_token(LAND);
              {if (true) return Operation.LOGIC_AND;}
      break;
    case XOR:
      jj_consume_token(XOR);
             {if (true) return Operation.BITW_XOR;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LNOT)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(SYNTH)) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LAND)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(LOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public OLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe07ffc40,0x400,0x40,0x100,0x1d800000,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x807ff800,0x0,0x7fe000,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x1d800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1c7,0x0,0x0,0x0,0x0,0x18000,0x60000,0x7800,0xc0,0x780000,0xc0,0xc0,0x107,0x400,0x0,0x400,0x6,0x7800,0x18000,0x60000,0xc0,0x780000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public OLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public OLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public OLParser(OLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(OLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
