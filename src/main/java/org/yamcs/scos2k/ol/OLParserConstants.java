/* Generated By:JavaCC: Do not edit this line. OLParserConstants.java */
package org.yamcs.scos2k.ol;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int THEN = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int ENDIF = 9;
  /** RegularExpression Id. */
  int RETURN = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int SIN = 13;
  /** RegularExpression Id. */
  int COS = 14;
  /** RegularExpression Id. */
  int TAN = 15;
  /** RegularExpression Id. */
  int COTAN = 16;
  /** RegularExpression Id. */
  int ARCSIN = 17;
  /** RegularExpression Id. */
  int ARCCOS = 18;
  /** RegularExpression Id. */
  int ARCTAN = 19;
  /** RegularExpression Id. */
  int ARCCOTAN = 20;
  /** RegularExpression Id. */
  int ABS = 21;
  /** RegularExpression Id. */
  int SYSTEM_TIME = 22;
  /** RegularExpression Id. */
  int SYSTEM_DATE = 23;
  /** RegularExpression Id. */
  int AND = 24;
  /** RegularExpression Id. */
  int OR = 25;
  /** RegularExpression Id. */
  int NOR = 26;
  /** RegularExpression Id. */
  int LOR = 27;
  /** RegularExpression Id. */
  int XOR = 28;
  /** RegularExpression Id. */
  int LAND = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int LNOT = 31;
  /** RegularExpression Id. */
  int SYNTH = 32;
  /** RegularExpression Id. */
  int IDENTIFIER = 33;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 34;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 35;
  /** RegularExpression Id. */
  int STRING_LITERAL = 36;
  /** RegularExpression Id. */
  int EXPONENT = 37;
  /** RegularExpression Id. */
  int DIG2 = 38;
  /** RegularExpression Id. */
  int DIG3 = 39;
  /** RegularExpression Id. */
  int DIG4 = 40;
  /** RegularExpression Id. */
  int DIG6 = 41;
  /** RegularExpression Id. */
  int DIG7 = 42;
  /** RegularExpression Id. */
  int ABS_TIME_ADS = 43;
  /** RegularExpression Id. */
  int ABS_TIME_ASCIIA = 44;
  /** RegularExpression Id. */
  int ABS_TIME_ASCIIB = 45;
  /** RegularExpression Id. */
  int DELTA_TIME = 46;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"endif\"",
    "\"return\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"cotan\"",
    "\"arcsin\"",
    "\"arccos\"",
    "\"arctan\"",
    "\"arccotan\"",
    "\"abs\"",
    "\"system_time\"",
    "\"system_date\"",
    "\"and\"",
    "\"or\"",
    "\"nor\"",
    "\"lor\"",
    "\"xor\"",
    "\"land\"",
    "\"not\"",
    "\"lnot\"",
    "\"synth\"",
    "<IDENTIFIER>",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<STRING_LITERAL>",
    "<EXPONENT>",
    "<DIG2>",
    "<DIG3>",
    "<DIG4>",
    "<DIG6>",
    "<DIG7>",
    "<ABS_TIME_ADS>",
    "<ABS_TIME_ASCIIA>",
    "<ABS_TIME_ASCIIB>",
    "<DELTA_TIME>",
    "\";\"",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"<>\"",
    "\"<<\"",
    "\">>\"",
    "\"*\"",
    "\"**\"",
    "\"/\"",
    "\"%\"",
  };

}
